% FPGADataCapture is a generated class used for FPGA Data Capture. FPGADataCapture
% connects MATLAB with a FPGA and captures the FPGA internal signals via
% JTAG connection.
% 
% dco = FPGADataCapture returns a FPGA Data Capture System object generated by 
% the user. It captures internal signals from an FPGA that contains the FPGA 
% Data Capture HDL IP core, and returns the data to MATLAB over the JTAG cable. 
% 
%  Step method syntax
% [Logical_Operator_out1,Delay_out1,Delay1_out1]=step(dco) connects to the FPGA, and read data from the FPGA.
% 
% FPGADataCapture methods:
% step - see above description for use of this method
% release - Allow property value and input characteristics changes, and release connection to FPGA board
% clone - Create FPGADataCapture object with same property values
% isLocked - Locked status (logical)
% setTriggerCondition - Set trigger condition for each trigger signal
% setTriggerCombinationOperator - Set trigger combination operator
% setDataType - Set signal data type
% displayDataTypes - Display current data type settings
% displayTriggerCondition - Display current trigger condition
% launchApp - Launch Graphical User Interface (GUI) App for setting data types, triggers, and capture data interactively
% 
% FPGADataCapture properties:
% TimeOut - Time to wait before throwing exception, if trigger condition is not met
% TriggerPosition - The number of samples captured before trigger event
% JTAGCableName - Name of the JTAG cable used for data capture
% JTAGChainPosition - JTAG chain position number of the target FPGA
% IRLengthBefore  - Instruction register lengths before FPGA
% IRLengthAfter   - Instruction register lengths after FPGA
% TckFrequency    - JTAG clock frequency in MHz. 
%
% Created: 20-Apr-2018 19:23:04
% Generated by MATLAB 9.3 and HDL Verifier 5.3

classdef FPGADataCapture< hdlverifier.FPGADataReader

methods
    function obj = FPGADataCapture
        obj.TriggerPosition  =  0;
        obj.TimeOut          = 10;
        obj.setDataType('Logical_Operator_out1','boolean');
        obj.setDataType('Delay_out1','int16');
        obj.setDataType('Delay1_out1','int16');
    end
end

% !!! Do NOT change any of the constant properties below !!!
properties (Nontunable, Constant)
    % SamplesPerFrame Samples per frame
    SamplesPerFrame = 32768
    BitWidth = [1  16  16]
    SignalNames = {'Logical_Operator_out1','Delay_out1','Delay1_out1'}
    IsSignalTrigger = [1  1  1]
    IsSignalData = [1  1  1]
    % FPGAVendor FPGA vendor
    FPGAVendor = 'Xilinx'
    % Version
    Version = '1.0'
    % Timestamp
    TimeStamp = '20-Apr-2018 19:23:04'
end

end
